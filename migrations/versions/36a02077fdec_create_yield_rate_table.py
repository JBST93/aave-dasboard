# alembic revision script (versions/36a02077fdec_create_yield_rate_table.py)

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects.postgresql import JSONB
from sqlalchemy.engine.reflection import Inspector

# revision identifiers, used by Alembic.
revision = '36a02077fdec'
down_revision = '75408d82f069'
branch_labels = None
depends_on = None

def upgrade():
    # Get the current connection and inspector
    bind = op.get_bind()
    inspector = Inspector.from_engine(bind)

    # Check if the 'yield_rate' table already exists
    if 'yield_rate' not in inspector.get_table_names():
        # If it doesn't exist, create the 'yield_rate' table
        op.create_table('yield_rate',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('market', sa.String(length=50), nullable=False),
            sa.Column('project', sa.String(length=50), nullable=False),
            sa.Column('information', JSONB, nullable=True),
            sa.Column('yield_rate_base', sa.Float(), nullable=False),
            sa.Column('yield_rate_reward', sa.Float(), nullable=True),
            sa.Column('yield_token_reward', sa.String(length=50), nullable=True),
            sa.Column('tvl', sa.Float(), nullable=False, default=0),
            sa.Column('chain', sa.String(length=20), nullable=False),
            sa.Column('type', sa.String(length=100), nullable=False),
            sa.Column('smart_contract', sa.String(length=150), nullable=False),
            sa.Column('timestamp', sa.DateTime(), default=sa.func.current_timestamp(), nullable=True),
            sa.PrimaryKeyConstraint('id')
        )

    # Ensure 'supply' column is not null
    op.execute('UPDATE stablecoin SET supply = 0 WHERE supply IS NULL')
    op.alter_column('stablecoin', 'supply', nullable=False)

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('stablecoin', 'supply', nullable=True)

    # Check if the 'yield_rate' table exists before dropping it
    bind = op.get_bind()
    inspector = Inspector.from_engine(bind)
    if 'yield_rate' in inspector.get_table_names():
        op.drop_table('yield_rate')
    # ### end Alembic commands ###
